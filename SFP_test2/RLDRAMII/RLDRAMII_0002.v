// RLDRAMII_0002.v

// This file was auto-generated from alt_mem_if_rldramii_emif_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module RLDRAMII_0002 (
		input  wire         pll_ref_clk,               //      pll_ref_clk.clk
		input  wire         global_reset_n,            //     global_reset.reset_n
		input  wire         soft_reset_n,              //       soft_reset.reset_n
		output wire         afi_clk,                   //          afi_clk.clk
		output wire         afi_half_clk,              //     afi_half_clk.clk
		output wire         afi_reset_n,               //        afi_reset.reset_n
		output wire         afi_reset_export_n,        // afi_reset_export.reset_n
		output wire [18:0]  mem_a,                     //           memory.mem_a
		output wire [2:0]   mem_ba,                    //                 .mem_ba
		output wire         mem_ck,                    //                 .mem_ck
		output wire         mem_ck_n,                  //                 .mem_ck_n
		output wire [0:0]   mem_cs_n,                  //                 .mem_cs_n
		output wire [1:0]   mem_dk,                    //                 .mem_dk
		output wire [1:0]   mem_dk_n,                  //                 .mem_dk_n
		output wire [0:0]   mem_dm,                    //                 .mem_dm
		inout  wire [35:0]  mem_dq,                    //                 .mem_dq
		input  wire [1:0]   mem_qk,                    //                 .mem_qk
		input  wire [1:0]   mem_qk_n,                  //                 .mem_qk_n
		output wire         mem_ref_n,                 //                 .mem_ref_n
		output wire         mem_we_n,                  //                 .mem_we_n
		input  wire [2:0]   avl_size,                  //              avl.burstcount
		input  wire [143:0] avl_wdata,                 //                 .writedata
		output wire         avl_rdata_valid,           //                 .readdatavalid
		output wire [143:0] avl_rdata,                 //                 .readdata
		output wire         avl_ready,                 //                 .waitrequest_n
		input  wire         avl_write_req,             //                 .write
		input  wire         avl_read_req,              //                 .read
		input  wire [21:0]  avl_addr,                  //                 .address
		output wire         local_init_done,           //           status.local_init_done
		output wire         local_cal_success,         //                 .local_cal_success
		output wire         local_cal_fail,            //                 .local_cal_fail
		input  wire         oct_rzqin,                 //              oct.rzqin
		output wire         pll_mem_clk,               //      pll_sharing.pll_mem_clk
		output wire         pll_write_clk,             //                 .pll_write_clk
		output wire         pll_locked,                //                 .pll_locked
		output wire         pll_write_clk_pre_phy_clk, //                 .pll_write_clk_pre_phy_clk
		output wire         pll_addr_cmd_clk,          //                 .pll_addr_cmd_clk
		output wire         pll_avl_clk,               //                 .pll_avl_clk
		output wire         pll_config_clk,            //                 .pll_config_clk
		output wire         pll_mem_phy_clk,           //                 .pll_mem_phy_clk
		output wire         afi_phy_clk,               //                 .afi_phy_clk
		output wire         pll_avl_phy_clk            //                 .pll_avl_phy_clk
	);

	wire    [1:0] m0_phy_mux_afi_rdata_en_full;                 // m0:phy_mux_rdata_en_full -> p0:afi_rdata_en_full
	wire    [1:0] m0_phy_mux_afi_ref_n;                         // m0:phy_mux_ref_n -> p0:afi_ref_n
	wire          p0_afi_afi_cal_success;                       // p0:afi_cal_success -> m0:phy_mux_cal_success
	wire    [3:0] m0_phy_mux_afi_wdata_valid;                   // m0:phy_mux_wdata_valid -> p0:afi_wdata_valid
	wire  [143:0] p0_afi_afi_rdata;                             // p0:afi_rdata -> m0:phy_mux_rdata
	wire  [143:0] m0_phy_mux_afi_wdata;                         // m0:phy_mux_wdata -> p0:afi_wdata
	wire   [37:0] m0_phy_mux_afi_addr;                          // m0:phy_mux_addr -> p0:afi_addr
	wire    [5:0] m0_phy_mux_afi_ba;                            // m0:phy_mux_ba -> p0:afi_ba
	wire    [3:0] m0_phy_mux_afi_dm;                            // m0:phy_mux_dm -> p0:afi_dm
	wire          p0_afi_afi_cal_fail;                          // p0:afi_cal_fail -> m0:phy_mux_cal_fail
	wire    [1:0] p0_afi_afi_rdata_valid;                       // p0:afi_rdata_valid -> m0:phy_mux_rdata_valid
	wire    [1:0] m0_phy_mux_afi_we_n;                          // m0:phy_mux_we_n -> p0:afi_we_n
	wire    [1:0] m0_phy_mux_afi_cs_n;                          // m0:phy_mux_cs_n -> p0:afi_cs_n
	wire    [1:0] m0_phy_mux_afi_rdata_en;                      // m0:phy_mux_rdata_en -> p0:afi_rdata_en
	wire          p0_avl_clk_clk;                               // p0:avl_clk -> [dmaster:clk_clk, mm_interconnect_0:p0_avl_clk_clk, s0:avl_clk]
	wire          p0_avl_reset_reset;                           // p0:avl_reset_n -> [dmaster:clk_reset_reset, mm_interconnect_0:dmaster_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_0:dmaster_master_translator_reset_reset_bridge_in_reset_reset, s0:avl_reset_n]
	wire          p0_scc_clk_clk;                               // p0:scc_clk -> s0:scc_clk
	wire          p0_scc_reset_reset;                           // p0:scc_reset_n -> s0:reset_n_scc_clk
	wire    [3:0] s0_afi_afi_dm;                                // s0:afi_dm -> m0:seq_mux_dm
	wire    [1:0] s0_afi_afi_rdata_en_full;                     // s0:afi_rdata_en_full -> m0:seq_mux_rdata_en_full
	wire    [1:0] s0_afi_afi_ref_n;                             // s0:afi_ref_n -> m0:seq_mux_ref_n
	wire    [1:0] m0_seq_mux_afi_rdata_valid;                   // m0:seq_mux_rdata_valid -> s0:afi_rdata_valid
	wire    [1:0] s0_afi_afi_we_n;                              // s0:afi_we_n -> m0:seq_mux_we_n
	wire    [3:0] s0_afi_afi_wdata_valid;                       // s0:afi_wdata_valid -> m0:seq_mux_wdata_valid
	wire  [143:0] m0_seq_mux_afi_rdata;                         // m0:seq_mux_rdata -> s0:afi_rdata
	wire    [1:0] s0_afi_afi_cs_n;                              // s0:afi_cs_n -> m0:seq_mux_cs_n
	wire    [1:0] s0_afi_afi_rdata_en;                          // s0:afi_rdata_en -> m0:seq_mux_rdata_en
	wire  [143:0] s0_afi_afi_wdata;                             // s0:afi_wdata -> m0:seq_mux_wdata
	wire   [37:0] s0_afi_afi_addr;                              // s0:afi_addr -> m0:seq_mux_addr
	wire    [5:0] s0_afi_afi_ba;                                // s0:afi_ba -> m0:seq_mux_ba
	wire          s0_mux_sel_mux_sel;                           // s0:phy_mux_sel -> m0:mux_sel
	wire    [5:0] s0_phy_phy_afi_rlat;                          // s0:phy_afi_rlat -> p0:phy_afi_rlat
	wire          p0_phy_phy_clk;                               // p0:phy_clk -> s0:phy_clk
	wire    [4:0] s0_phy_phy_read_latency_counter;              // s0:phy_read_latency_counter -> p0:phy_read_latency_counter
	wire    [5:0] s0_phy_phy_afi_wlat;                          // s0:phy_afi_wlat -> p0:phy_afi_wlat
	wire          s0_phy_phy_reset_mem_stable;                  // s0:phy_reset_mem_stable -> p0:phy_reset_mem_stable
	wire    [1:0] s0_phy_phy_read_increment_vfifo_qr;           // s0:phy_read_increment_vfifo_qr -> p0:phy_read_increment_vfifo_qr
	wire    [1:0] s0_phy_phy_vfifo_rd_en_override;              // s0:phy_vfifo_rd_en_override -> p0:phy_vfifo_rd_en_override
	wire    [1:0] s0_phy_phy_read_fifo_reset;                   // s0:phy_read_fifo_reset -> p0:phy_read_fifo_reset
	wire          s0_phy_phy_cal_fail;                          // s0:phy_cal_fail -> p0:phy_cal_fail
	wire          s0_phy_phy_cal_success;                       // s0:phy_cal_success -> p0:phy_cal_success
	wire          p0_phy_phy_reset_n;                           // p0:phy_reset_n -> s0:phy_reset_n
	wire   [31:0] s0_phy_phy_cal_debug_info;                    // s0:phy_cal_debug_info -> p0:phy_cal_debug_info
	wire    [1:0] s0_phy_phy_read_increment_vfifo_hr;           // s0:phy_read_increment_vfifo_hr -> p0:phy_read_increment_vfifo_hr
	wire    [1:0] s0_phy_phy_read_increment_vfifo_fr;           // s0:phy_read_increment_vfifo_fr -> p0:phy_read_increment_vfifo_fr
	wire  [143:0] p0_phy_phy_read_fifo_q;                       // p0:phy_read_fifo_q -> s0:phy_read_fifo_q
	wire    [7:0] p0_calib_calib_skip_steps;                    // p0:calib_skip_steps -> s0:calib_skip_steps
	wire   [35:0] s0_scc_scc_dq_ena;                            // s0:scc_dq_ena -> p0:scc_dq_ena
	wire    [0:0] s0_scc_scc_upd;                               // s0:scc_upd -> p0:scc_upd
	wire    [1:0] s0_scc_scc_dqs_io_ena;                        // s0:scc_dqs_io_ena -> p0:scc_dqs_io_ena
	wire    [0:0] s0_scc_scc_dm_ena;                            // s0:scc_dm_ena -> p0:scc_dm_ena
	wire    [1:0] p0_scc_capture_strobe_tracking;               // p0:capture_strobe_tracking -> s0:capture_strobe_tracking
	wire    [1:0] s0_scc_scc_dqs_ena;                           // s0:scc_dqs_ena -> p0:scc_dqs_ena
	wire    [0:0] s0_scc_scc_data;                              // s0:scc_data -> p0:scc_data
	wire          dmaster_master_reset_reset;                   // dmaster:master_reset_reset -> p0:csr_soft_reset_req
	wire    [1:0] c0_afi_afi_rdata_en_full;                     // c0:afi_rdata_en_full -> m0:afi_rdata_en_full
	wire    [1:0] c0_afi_afi_ref_n;                             // c0:afi_ref_n -> m0:afi_ref_n
	wire          m0_afi_afi_cal_success;                       // m0:afi_cal_success -> c0:afi_cal_success
	wire    [3:0] c0_afi_afi_wdata_valid;                       // c0:afi_wdata_valid -> m0:afi_wdata_valid
	wire  [143:0] m0_afi_afi_rdata;                             // m0:afi_rdata -> c0:afi_rdata
	wire  [143:0] c0_afi_afi_wdata;                             // c0:afi_wdata -> m0:afi_wdata
	wire   [37:0] c0_afi_afi_addr;                              // c0:afi_addr -> m0:afi_addr
	wire    [5:0] c0_afi_afi_ba;                                // c0:afi_ba -> m0:afi_ba
	wire    [3:0] c0_afi_afi_dm;                                // c0:afi_dm -> m0:afi_dm
	wire          m0_afi_afi_cal_fail;                          // m0:afi_cal_fail -> c0:afi_cal_fail
	wire    [1:0] m0_afi_afi_rdata_valid;                       // m0:afi_rdata_valid -> c0:afi_rdata_valid
	wire    [1:0] c0_afi_afi_we_n;                              // c0:afi_we_n -> m0:afi_we_n
	wire    [1:0] c0_afi_afi_cs_n;                              // c0:afi_cs_n -> m0:afi_cs_n
	wire    [1:0] c0_afi_afi_rdata_en;                          // c0:afi_rdata_en -> m0:afi_rdata_en
	wire   [15:0] oct0_oct_sharing_parallelterminationcontrol;  // oct0:parallelterminationcontrol -> p0:parallelterminationcontrol
	wire   [15:0] oct0_oct_sharing_seriesterminationcontrol;    // oct0:seriesterminationcontrol -> p0:seriesterminationcontrol
	wire          p0_dll_clk_clk;                               // p0:dll_clk -> dll0:clk
	wire          p0_dll_sharing_dll_pll_locked;                // p0:dll_pll_locked -> dll0:dll_pll_locked
	wire    [6:0] dll0_dll_sharing_dll_delayctrl;               // dll0:dll_delayctrl -> p0:dll_delayctrl
	wire   [31:0] dmaster_master_readdata;                      // mm_interconnect_0:dmaster_master_readdata -> dmaster:master_readdata
	wire          dmaster_master_waitrequest;                   // mm_interconnect_0:dmaster_master_waitrequest -> dmaster:master_waitrequest
	wire   [31:0] dmaster_master_address;                       // dmaster:master_address -> mm_interconnect_0:dmaster_master_address
	wire          dmaster_master_read;                          // dmaster:master_read -> mm_interconnect_0:dmaster_master_read
	wire    [3:0] dmaster_master_byteenable;                    // dmaster:master_byteenable -> mm_interconnect_0:dmaster_master_byteenable
	wire          dmaster_master_readdatavalid;                 // mm_interconnect_0:dmaster_master_readdatavalid -> dmaster:master_readdatavalid
	wire          dmaster_master_write;                         // dmaster:master_write -> mm_interconnect_0:dmaster_master_write
	wire   [31:0] dmaster_master_writedata;                     // dmaster:master_writedata -> mm_interconnect_0:dmaster_master_writedata
	wire   [31:0] mm_interconnect_0_s0_seq_debug_readdata;      // s0:seq_readdata -> mm_interconnect_0:s0_seq_debug_readdata
	wire          mm_interconnect_0_s0_seq_debug_waitrequest;   // s0:seq_waitrequest -> mm_interconnect_0:s0_seq_debug_waitrequest
	wire   [31:0] mm_interconnect_0_s0_seq_debug_address;       // mm_interconnect_0:s0_seq_debug_address -> s0:seq_address
	wire          mm_interconnect_0_s0_seq_debug_read;          // mm_interconnect_0:s0_seq_debug_read -> s0:seq_read
	wire    [3:0] mm_interconnect_0_s0_seq_debug_byteenable;    // mm_interconnect_0:s0_seq_debug_byteenable -> s0:seq_byteenable
	wire          mm_interconnect_0_s0_seq_debug_readdatavalid; // s0:seq_readdatavalid -> mm_interconnect_0:s0_seq_debug_readdatavalid
	wire          mm_interconnect_0_s0_seq_debug_write;         // mm_interconnect_0:s0_seq_debug_write -> s0:seq_write
	wire   [31:0] mm_interconnect_0_s0_seq_debug_writedata;     // mm_interconnect_0:s0_seq_debug_writedata -> s0:seq_writedata
	wire    [0:0] mm_interconnect_0_s0_seq_debug_burstcount;    // mm_interconnect_0:s0_seq_debug_burstcount -> s0:seq_burstcount

	RLDRAMII_pll0 pll0 (
		.global_reset_n            (global_reset_n),            // global_reset.reset_n
		.afi_clk                   (afi_clk),                   //      afi_clk.clk
		.afi_half_clk              (afi_half_clk),              // afi_half_clk.clk
		.pll_ref_clk               (pll_ref_clk),               //  pll_ref_clk.clk
		.pll_mem_clk               (pll_mem_clk),               //  pll_sharing.pll_mem_clk
		.pll_write_clk             (pll_write_clk),             //             .pll_write_clk
		.pll_locked                (pll_locked),                //             .pll_locked
		.pll_write_clk_pre_phy_clk (pll_write_clk_pre_phy_clk), //             .pll_write_clk_pre_phy_clk
		.pll_addr_cmd_clk          (pll_addr_cmd_clk),          //             .pll_addr_cmd_clk
		.pll_avl_clk               (pll_avl_clk),               //             .pll_avl_clk
		.pll_config_clk            (pll_config_clk),            //             .pll_config_clk
		.pll_mem_phy_clk           (pll_mem_phy_clk),           //             .pll_mem_phy_clk
		.afi_phy_clk               (afi_phy_clk),               //             .afi_phy_clk
		.pll_avl_phy_clk           (pll_avl_phy_clk)            //             .pll_avl_phy_clk
	);

	RLDRAMII_p0 p0 (
		.global_reset_n              (global_reset_n),                              //       global_reset.reset_n
		.soft_reset_n                (soft_reset_n),                                //         soft_reset.reset_n
		.csr_soft_reset_req          (dmaster_master_reset_reset),                  // csr_soft_reset_req.reset
		.afi_reset_n                 (afi_reset_n),                                 //          afi_reset.reset_n
		.afi_reset_export_n          (afi_reset_export_n),                          //   afi_reset_export.reset_n
		.afi_clk                     (afi_clk),                                     //            afi_clk.clk
		.afi_half_clk                (afi_half_clk),                                //       afi_half_clk.clk
		.avl_clk                     (p0_avl_clk_clk),                              //            avl_clk.clk
		.avl_reset_n                 (p0_avl_reset_reset),                          //          avl_reset.reset_n
		.scc_clk                     (p0_scc_clk_clk),                              //            scc_clk.clk
		.scc_reset_n                 (p0_scc_reset_reset),                          //          scc_reset.reset_n
		.dll_clk                     (p0_dll_clk_clk),                              //            dll_clk.clk
		.afi_addr                    (m0_phy_mux_afi_addr),                         //                afi.afi_addr
		.afi_ba                      (m0_phy_mux_afi_ba),                           //                   .afi_ba
		.afi_cs_n                    (m0_phy_mux_afi_cs_n),                         //                   .afi_cs_n
		.afi_we_n                    (m0_phy_mux_afi_we_n),                         //                   .afi_we_n
		.afi_ref_n                   (m0_phy_mux_afi_ref_n),                        //                   .afi_ref_n
		.afi_wdata_valid             (m0_phy_mux_afi_wdata_valid),                  //                   .afi_wdata_valid
		.afi_wdata                   (m0_phy_mux_afi_wdata),                        //                   .afi_wdata
		.afi_dm                      (m0_phy_mux_afi_dm),                           //                   .afi_dm
		.afi_rdata                   (p0_afi_afi_rdata),                            //                   .afi_rdata
		.afi_rdata_en                (m0_phy_mux_afi_rdata_en),                     //                   .afi_rdata_en
		.afi_rdata_en_full           (m0_phy_mux_afi_rdata_en_full),                //                   .afi_rdata_en_full
		.afi_rdata_valid             (p0_afi_afi_rdata_valid),                      //                   .afi_rdata_valid
		.afi_cal_success             (p0_afi_afi_cal_success),                      //                   .afi_cal_success
		.afi_cal_fail                (p0_afi_afi_cal_fail),                         //                   .afi_cal_fail
		.phy_clk                     (p0_phy_phy_clk),                              //                phy.phy_clk
		.phy_reset_n                 (p0_phy_phy_reset_n),                          //                   .phy_reset_n
		.phy_read_latency_counter    (s0_phy_phy_read_latency_counter),             //                   .phy_read_latency_counter
		.phy_afi_wlat                (s0_phy_phy_afi_wlat),                         //                   .phy_afi_wlat
		.phy_afi_rlat                (s0_phy_phy_afi_rlat),                         //                   .phy_afi_rlat
		.phy_read_increment_vfifo_fr (s0_phy_phy_read_increment_vfifo_fr),          //                   .phy_read_increment_vfifo_fr
		.phy_read_increment_vfifo_hr (s0_phy_phy_read_increment_vfifo_hr),          //                   .phy_read_increment_vfifo_hr
		.phy_read_increment_vfifo_qr (s0_phy_phy_read_increment_vfifo_qr),          //                   .phy_read_increment_vfifo_qr
		.phy_reset_mem_stable        (s0_phy_phy_reset_mem_stable),                 //                   .phy_reset_mem_stable
		.phy_cal_success             (s0_phy_phy_cal_success),                      //                   .phy_cal_success
		.phy_cal_fail                (s0_phy_phy_cal_fail),                         //                   .phy_cal_fail
		.phy_cal_debug_info          (s0_phy_phy_cal_debug_info),                   //                   .phy_cal_debug_info
		.phy_read_fifo_reset         (s0_phy_phy_read_fifo_reset),                  //                   .phy_read_fifo_reset
		.phy_vfifo_rd_en_override    (s0_phy_phy_vfifo_rd_en_override),             //                   .phy_vfifo_rd_en_override
		.phy_read_fifo_q             (p0_phy_phy_read_fifo_q),                      //                   .phy_read_fifo_q
		.calib_skip_steps            (p0_calib_calib_skip_steps),                   //              calib.calib_skip_steps
		.scc_data                    (s0_scc_scc_data),                             //                scc.scc_data
		.scc_dqs_ena                 (s0_scc_scc_dqs_ena),                          //                   .scc_dqs_ena
		.scc_dqs_io_ena              (s0_scc_scc_dqs_io_ena),                       //                   .scc_dqs_io_ena
		.scc_dq_ena                  (s0_scc_scc_dq_ena),                           //                   .scc_dq_ena
		.scc_dm_ena                  (s0_scc_scc_dm_ena),                           //                   .scc_dm_ena
		.capture_strobe_tracking     (p0_scc_capture_strobe_tracking),              //                   .capture_strobe_tracking
		.scc_upd                     (s0_scc_scc_upd),                              //                   .scc_upd
		.pll_mem_clk                 (pll_mem_clk),                                 //        pll_sharing.pll_mem_clk
		.pll_write_clk               (pll_write_clk),                               //                   .pll_write_clk
		.pll_locked                  (pll_locked),                                  //                   .pll_locked
		.pll_write_clk_pre_phy_clk   (pll_write_clk_pre_phy_clk),                   //                   .pll_write_clk_pre_phy_clk
		.pll_addr_cmd_clk            (pll_addr_cmd_clk),                            //                   .pll_addr_cmd_clk
		.pll_avl_clk                 (pll_avl_clk),                                 //                   .pll_avl_clk
		.pll_config_clk              (pll_config_clk),                              //                   .pll_config_clk
		.pll_mem_phy_clk             (pll_mem_phy_clk),                             //                   .pll_mem_phy_clk
		.afi_phy_clk                 (afi_phy_clk),                                 //                   .afi_phy_clk
		.pll_avl_phy_clk             (pll_avl_phy_clk),                             //                   .pll_avl_phy_clk
		.dll_pll_locked              (p0_dll_sharing_dll_pll_locked),               //        dll_sharing.dll_pll_locked
		.dll_delayctrl               (dll0_dll_sharing_dll_delayctrl),              //                   .dll_delayctrl
		.seriesterminationcontrol    (oct0_oct_sharing_seriesterminationcontrol),   //        oct_sharing.seriesterminationcontrol
		.parallelterminationcontrol  (oct0_oct_sharing_parallelterminationcontrol), //                   .parallelterminationcontrol
		.mem_a                       (mem_a),                                       //             memory.mem_a
		.mem_ba                      (mem_ba),                                      //                   .mem_ba
		.mem_ck                      (mem_ck),                                      //                   .mem_ck
		.mem_ck_n                    (mem_ck_n),                                    //                   .mem_ck_n
		.mem_cs_n                    (mem_cs_n),                                    //                   .mem_cs_n
		.mem_dk                      (mem_dk),                                      //                   .mem_dk
		.mem_dk_n                    (mem_dk_n),                                    //                   .mem_dk_n
		.mem_dm                      (mem_dm),                                      //                   .mem_dm
		.mem_dq                      (mem_dq),                                      //                   .mem_dq
		.mem_qk                      (mem_qk),                                      //                   .mem_qk
		.mem_qk_n                    (mem_qk_n),                                    //                   .mem_qk_n
		.mem_ref_n                   (mem_ref_n),                                   //                   .mem_ref_n
		.mem_we_n                    (mem_we_n)                                     //                   .mem_we_n
	);

	afi_mux_rldramx #(
		.AFI_RATE_RATIO      (2),
		.AFI_ADDR_WIDTH      (38),
		.AFI_BANKADDR_WIDTH  (6),
		.AFI_CONTROL_WIDTH   (2),
		.AFI_CS_WIDTH        (2),
		.AFI_DM_WIDTH        (4),
		.AFI_DQ_WIDTH        (144),
		.AFI_WRITE_DQS_WIDTH (4)
	) m0 (
		.afi_addr              (c0_afi_afi_addr),              //     afi.afi_addr
		.afi_ba                (c0_afi_afi_ba),                //        .afi_ba
		.afi_cs_n              (c0_afi_afi_cs_n),              //        .afi_cs_n
		.afi_we_n              (c0_afi_afi_we_n),              //        .afi_we_n
		.afi_ref_n             (c0_afi_afi_ref_n),             //        .afi_ref_n
		.afi_wdata_valid       (c0_afi_afi_wdata_valid),       //        .afi_wdata_valid
		.afi_wdata             (c0_afi_afi_wdata),             //        .afi_wdata
		.afi_dm                (c0_afi_afi_dm),                //        .afi_dm
		.afi_rdata             (m0_afi_afi_rdata),             //        .afi_rdata
		.afi_rdata_en          (c0_afi_afi_rdata_en),          //        .afi_rdata_en
		.afi_rdata_en_full     (c0_afi_afi_rdata_en_full),     //        .afi_rdata_en_full
		.afi_rdata_valid       (m0_afi_afi_rdata_valid),       //        .afi_rdata_valid
		.afi_cal_success       (m0_afi_afi_cal_success),       //        .afi_cal_success
		.afi_cal_fail          (m0_afi_afi_cal_fail),          //        .afi_cal_fail
		.seq_mux_addr          (s0_afi_afi_addr),              // seq_mux.afi_addr
		.seq_mux_ba            (s0_afi_afi_ba),                //        .afi_ba
		.seq_mux_cs_n          (s0_afi_afi_cs_n),              //        .afi_cs_n
		.seq_mux_we_n          (s0_afi_afi_we_n),              //        .afi_we_n
		.seq_mux_ref_n         (s0_afi_afi_ref_n),             //        .afi_ref_n
		.seq_mux_wdata_valid   (s0_afi_afi_wdata_valid),       //        .afi_wdata_valid
		.seq_mux_wdata         (s0_afi_afi_wdata),             //        .afi_wdata
		.seq_mux_dm            (s0_afi_afi_dm),                //        .afi_dm
		.seq_mux_rdata         (m0_seq_mux_afi_rdata),         //        .afi_rdata
		.seq_mux_rdata_en      (s0_afi_afi_rdata_en),          //        .afi_rdata_en
		.seq_mux_rdata_en_full (s0_afi_afi_rdata_en_full),     //        .afi_rdata_en_full
		.seq_mux_rdata_valid   (m0_seq_mux_afi_rdata_valid),   //        .afi_rdata_valid
		.phy_mux_addr          (m0_phy_mux_afi_addr),          // phy_mux.afi_addr
		.phy_mux_ba            (m0_phy_mux_afi_ba),            //        .afi_ba
		.phy_mux_cs_n          (m0_phy_mux_afi_cs_n),          //        .afi_cs_n
		.phy_mux_we_n          (m0_phy_mux_afi_we_n),          //        .afi_we_n
		.phy_mux_ref_n         (m0_phy_mux_afi_ref_n),         //        .afi_ref_n
		.phy_mux_wdata_valid   (m0_phy_mux_afi_wdata_valid),   //        .afi_wdata_valid
		.phy_mux_wdata         (m0_phy_mux_afi_wdata),         //        .afi_wdata
		.phy_mux_dm            (m0_phy_mux_afi_dm),            //        .afi_dm
		.phy_mux_rdata         (p0_afi_afi_rdata),             //        .afi_rdata
		.phy_mux_rdata_en      (m0_phy_mux_afi_rdata_en),      //        .afi_rdata_en
		.phy_mux_rdata_en_full (m0_phy_mux_afi_rdata_en_full), //        .afi_rdata_en_full
		.phy_mux_rdata_valid   (p0_afi_afi_rdata_valid),       //        .afi_rdata_valid
		.phy_mux_cal_success   (p0_afi_afi_cal_success),       //        .afi_cal_success
		.phy_mux_cal_fail      (p0_afi_afi_cal_fail),          //        .afi_cal_fail
		.mux_sel               (s0_mux_sel_mux_sel)            // mux_sel.mux_sel
	);

	RLDRAMII_s0 s0 (
		.avl_clk                     (p0_avl_clk_clk),                               //   avl_clk.clk
		.avl_reset_n                 (p0_avl_reset_reset),                           // avl_reset.reset_n
		.scc_clk                     (p0_scc_clk_clk),                               //   scc_clk.clk
		.reset_n_scc_clk             (p0_scc_reset_reset),                           // scc_reset.reset_n
		.scc_data                    (s0_scc_scc_data),                              //       scc.scc_data
		.scc_dqs_ena                 (s0_scc_scc_dqs_ena),                           //          .scc_dqs_ena
		.scc_dqs_io_ena              (s0_scc_scc_dqs_io_ena),                        //          .scc_dqs_io_ena
		.scc_dq_ena                  (s0_scc_scc_dq_ena),                            //          .scc_dq_ena
		.scc_dm_ena                  (s0_scc_scc_dm_ena),                            //          .scc_dm_ena
		.capture_strobe_tracking     (p0_scc_capture_strobe_tracking),               //          .capture_strobe_tracking
		.scc_upd                     (s0_scc_scc_upd),                               //          .scc_upd
		.seq_waitrequest             (mm_interconnect_0_s0_seq_debug_waitrequest),   // seq_debug.waitrequest
		.seq_readdata                (mm_interconnect_0_s0_seq_debug_readdata),      //          .readdata
		.seq_readdatavalid           (mm_interconnect_0_s0_seq_debug_readdatavalid), //          .readdatavalid
		.seq_burstcount              (mm_interconnect_0_s0_seq_debug_burstcount),    //          .burstcount
		.seq_writedata               (mm_interconnect_0_s0_seq_debug_writedata),     //          .writedata
		.seq_address                 (mm_interconnect_0_s0_seq_debug_address),       //          .address
		.seq_write                   (mm_interconnect_0_s0_seq_debug_write),         //          .write
		.seq_read                    (mm_interconnect_0_s0_seq_debug_read),          //          .read
		.seq_byteenable              (mm_interconnect_0_s0_seq_debug_byteenable),    //          .byteenable
		.phy_clk                     (p0_phy_phy_clk),                               //       phy.phy_clk
		.phy_reset_n                 (p0_phy_phy_reset_n),                           //          .phy_reset_n
		.phy_read_latency_counter    (s0_phy_phy_read_latency_counter),              //          .phy_read_latency_counter
		.phy_afi_wlat                (s0_phy_phy_afi_wlat),                          //          .phy_afi_wlat
		.phy_afi_rlat                (s0_phy_phy_afi_rlat),                          //          .phy_afi_rlat
		.phy_read_increment_vfifo_fr (s0_phy_phy_read_increment_vfifo_fr),           //          .phy_read_increment_vfifo_fr
		.phy_read_increment_vfifo_hr (s0_phy_phy_read_increment_vfifo_hr),           //          .phy_read_increment_vfifo_hr
		.phy_read_increment_vfifo_qr (s0_phy_phy_read_increment_vfifo_qr),           //          .phy_read_increment_vfifo_qr
		.phy_reset_mem_stable        (s0_phy_phy_reset_mem_stable),                  //          .phy_reset_mem_stable
		.phy_cal_success             (s0_phy_phy_cal_success),                       //          .phy_cal_success
		.phy_cal_fail                (s0_phy_phy_cal_fail),                          //          .phy_cal_fail
		.phy_cal_debug_info          (s0_phy_phy_cal_debug_info),                    //          .phy_cal_debug_info
		.phy_read_fifo_reset         (s0_phy_phy_read_fifo_reset),                   //          .phy_read_fifo_reset
		.phy_vfifo_rd_en_override    (s0_phy_phy_vfifo_rd_en_override),              //          .phy_vfifo_rd_en_override
		.phy_read_fifo_q             (p0_phy_phy_read_fifo_q),                       //          .phy_read_fifo_q
		.calib_skip_steps            (p0_calib_calib_skip_steps),                    //     calib.calib_skip_steps
		.phy_mux_sel                 (s0_mux_sel_mux_sel),                           //   mux_sel.mux_sel
		.afi_clk                     (afi_clk),                                      //   afi_clk.clk
		.afi_reset_n                 (afi_reset_n),                                  // afi_reset.reset_n
		.afi_addr                    (s0_afi_afi_addr),                              //       afi.afi_addr
		.afi_ba                      (s0_afi_afi_ba),                                //          .afi_ba
		.afi_cs_n                    (s0_afi_afi_cs_n),                              //          .afi_cs_n
		.afi_we_n                    (s0_afi_afi_we_n),                              //          .afi_we_n
		.afi_ref_n                   (s0_afi_afi_ref_n),                             //          .afi_ref_n
		.afi_wdata_valid             (s0_afi_afi_wdata_valid),                       //          .afi_wdata_valid
		.afi_wdata                   (s0_afi_afi_wdata),                             //          .afi_wdata
		.afi_dm                      (s0_afi_afi_dm),                                //          .afi_dm
		.afi_rdata                   (m0_seq_mux_afi_rdata),                         //          .afi_rdata
		.afi_rdata_en                (s0_afi_afi_rdata_en),                          //          .afi_rdata_en
		.afi_rdata_en_full           (s0_afi_afi_rdata_en_full),                     //          .afi_rdata_en_full
		.afi_rdata_valid             (m0_seq_mux_afi_rdata_valid),                   //          .afi_rdata_valid
		.seq_debugaccess             (1'b0),                                         // (terminated)
		.phy_write_fr_cycle_shifts   ()                                              // (terminated)
	);

	RLDRAMII_dmaster #(
		.USE_PLI     (0),
		.PLI_PORT    (50000),
		.FIFO_DEPTHS (2)
	) dmaster (
		.clk_clk              (p0_avl_clk_clk),               //          clk.clk
		.clk_reset_reset      (~p0_avl_reset_reset),          //    clk_reset.reset
		.master_address       (dmaster_master_address),       //       master.address
		.master_readdata      (dmaster_master_readdata),      //             .readdata
		.master_read          (dmaster_master_read),          //             .read
		.master_write         (dmaster_master_write),         //             .write
		.master_writedata     (dmaster_master_writedata),     //             .writedata
		.master_waitrequest   (dmaster_master_waitrequest),   //             .waitrequest
		.master_readdatavalid (dmaster_master_readdatavalid), //             .readdatavalid
		.master_byteenable    (dmaster_master_byteenable),    //             .byteenable
		.master_reset_reset   (dmaster_master_reset_reset)    // master_reset.reset
	);

	alt_rld_controller_top_ctl_bl_is_one #(
		.MEM_IF_CS_WIDTH                    (1),
		.MEM_T_RC                           (8),
		.MEM_T_WL                           (9),
		.MEM_BUS_TURNAROUND_CYCLES_RD_TO_WR (2),
		.MEM_BUS_TURNAROUND_CYCLES_WR_TO_RD (0),
		.CTL_BURST_LENGTH                   (1),
		.CTL_ADDR_WIDTH                     (19),
		.CTL_CHIPADDR_WIDTH                 (0),
		.CTL_BANKADDR_WIDTH                 (3),
		.CTL_BEATADDR_WIDTH                 (0),
		.CTL_CS_WIDTH                       (1),
		.CTL_CONTROL_WIDTH                  (1),
		.CTL_T_REFI                         (30),
		.AVL_ADDR_WIDTH                     (22),
		.AVL_DATA_WIDTH                     (144),
		.AVL_NUM_SYMBOLS                    (16),
		.AVL_SIZE_WIDTH                     (3),
		.MEM_T_REFI                         (61),
		.HR_DDIO_OUT_HAS_THREE_REGS         (0),
		.AFI_RATE_RATIO                     (2),
		.AFI_ADDR_WIDTH                     (38),
		.AFI_BANKADDR_WIDTH                 (6),
		.AFI_CONTROL_WIDTH                  (2),
		.AFI_CS_WIDTH                       (2),
		.AFI_DM_WIDTH                       (4),
		.AFI_DQ_WIDTH                       (144),
		.AFI_WRITE_DQS_WIDTH                (4),
		.DEVICE_FAMILY                      ("Arria V")
	) c0 (
		.afi_reset_n       (afi_reset_n),              // afi_reset.reset_n
		.afi_clk           (afi_clk),                  //   afi_clk.clk
		.avl_size          (avl_size),                 //       avl.burstcount
		.avl_wdata         (avl_wdata),                //          .writedata
		.avl_rdata_valid   (avl_rdata_valid),          //          .readdatavalid
		.avl_rdata         (avl_rdata),                //          .readdata
		.avl_ready         (avl_ready),                //          .waitrequest_n
		.avl_write_req     (avl_write_req),            //          .write
		.avl_read_req      (avl_read_req),             //          .read
		.avl_addr          (avl_addr),                 //          .address
		.afi_addr          (c0_afi_afi_addr),          //       afi.afi_addr
		.afi_ba            (c0_afi_afi_ba),            //          .afi_ba
		.afi_cs_n          (c0_afi_afi_cs_n),          //          .afi_cs_n
		.afi_we_n          (c0_afi_afi_we_n),          //          .afi_we_n
		.afi_ref_n         (c0_afi_afi_ref_n),         //          .afi_ref_n
		.afi_wdata_valid   (c0_afi_afi_wdata_valid),   //          .afi_wdata_valid
		.afi_wdata         (c0_afi_afi_wdata),         //          .afi_wdata
		.afi_dm            (c0_afi_afi_dm),            //          .afi_dm
		.afi_rdata         (m0_afi_afi_rdata),         //          .afi_rdata
		.afi_rdata_en      (c0_afi_afi_rdata_en),      //          .afi_rdata_en
		.afi_rdata_en_full (c0_afi_afi_rdata_en_full), //          .afi_rdata_en_full
		.afi_rdata_valid   (m0_afi_afi_rdata_valid),   //          .afi_rdata_valid
		.afi_cal_success   (m0_afi_afi_cal_success),   //          .afi_cal_success
		.afi_cal_fail      (m0_afi_afi_cal_fail),      //          .afi_cal_fail
		.local_init_done   (local_init_done),          //    status.local_init_done
		.local_cal_success (local_cal_success),        //          .local_cal_success
		.local_cal_fail    (local_cal_fail)            //          .local_cal_fail
	);

	altera_mem_if_oct_arriav #(
		.OCT_TERM_CONTROL_WIDTH (16)
	) oct0 (
		.oct_rzqin                  (oct_rzqin),                                   //         oct.rzqin
		.seriesterminationcontrol   (oct0_oct_sharing_seriesterminationcontrol),   // oct_sharing.seriesterminationcontrol
		.parallelterminationcontrol (oct0_oct_sharing_parallelterminationcontrol)  //            .parallelterminationcontrol
	);

	altera_mem_if_dll_arriav #(
		.DLL_DELAY_CTRL_WIDTH       (7),
		.DLL_OFFSET_CTRL_WIDTH      (6),
		.DELAY_BUFFER_MODE          ("HIGH"),
		.DELAY_CHAIN_LENGTH         (8),
		.DLL_INPUT_FREQUENCY_PS_STR ("4000 ps")
	) dll0 (
		.clk            (p0_dll_clk_clk),                 //         clk.clk
		.dll_pll_locked (p0_dll_sharing_dll_pll_locked),  // dll_sharing.dll_pll_locked
		.dll_delayctrl  (dll0_dll_sharing_dll_delayctrl)  //            .dll_delayctrl
	);

	RLDRAMII_mm_interconnect_0 mm_interconnect_0 (
		.p0_avl_clk_clk                                              (p0_avl_clk_clk),                               //                                            p0_avl_clk.clk
		.dmaster_clk_reset_reset_bridge_in_reset_reset               (~p0_avl_reset_reset),                          //               dmaster_clk_reset_reset_bridge_in_reset.reset
		.dmaster_master_translator_reset_reset_bridge_in_reset_reset (~p0_avl_reset_reset),                          // dmaster_master_translator_reset_reset_bridge_in_reset.reset
		.dmaster_master_address                                      (dmaster_master_address),                       //                                        dmaster_master.address
		.dmaster_master_waitrequest                                  (dmaster_master_waitrequest),                   //                                                      .waitrequest
		.dmaster_master_byteenable                                   (dmaster_master_byteenable),                    //                                                      .byteenable
		.dmaster_master_read                                         (dmaster_master_read),                          //                                                      .read
		.dmaster_master_readdata                                     (dmaster_master_readdata),                      //                                                      .readdata
		.dmaster_master_readdatavalid                                (dmaster_master_readdatavalid),                 //                                                      .readdatavalid
		.dmaster_master_write                                        (dmaster_master_write),                         //                                                      .write
		.dmaster_master_writedata                                    (dmaster_master_writedata),                     //                                                      .writedata
		.s0_seq_debug_address                                        (mm_interconnect_0_s0_seq_debug_address),       //                                          s0_seq_debug.address
		.s0_seq_debug_write                                          (mm_interconnect_0_s0_seq_debug_write),         //                                                      .write
		.s0_seq_debug_read                                           (mm_interconnect_0_s0_seq_debug_read),          //                                                      .read
		.s0_seq_debug_readdata                                       (mm_interconnect_0_s0_seq_debug_readdata),      //                                                      .readdata
		.s0_seq_debug_writedata                                      (mm_interconnect_0_s0_seq_debug_writedata),     //                                                      .writedata
		.s0_seq_debug_burstcount                                     (mm_interconnect_0_s0_seq_debug_burstcount),    //                                                      .burstcount
		.s0_seq_debug_byteenable                                     (mm_interconnect_0_s0_seq_debug_byteenable),    //                                                      .byteenable
		.s0_seq_debug_readdatavalid                                  (mm_interconnect_0_s0_seq_debug_readdatavalid), //                                                      .readdatavalid
		.s0_seq_debug_waitrequest                                    (mm_interconnect_0_s0_seq_debug_waitrequest)    //                                                      .waitrequest
	);

endmodule
